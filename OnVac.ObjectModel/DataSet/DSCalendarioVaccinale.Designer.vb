'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3615
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSCalendarioVaccinale"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSCalendarioVaccinale
    Inherits Global.System.Data.DataSet
    
    Private tabledtCicSedVac As dtCicSedVacDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtCicSedVac")) Is Nothing) Then
                MyBase.Tables.Add(New dtCicSedVacDataTable(ds.Tables("dtCicSedVac")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCicSedVac() As dtCicSedVacDataTable
        Get
            Return Me.tabledtCicSedVac
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSCalendarioVaccinale = CType(MyBase.Clone,DSCalendarioVaccinale)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtCicSedVac")) Is Nothing) Then
                MyBase.Tables.Add(New dtCicSedVacDataTable(ds.Tables("dtCicSedVac")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtCicSedVac = CType(MyBase.Tables("dtCicSedVac"),dtCicSedVacDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCicSedVac) Is Nothing) Then
                Me.tabledtCicSedVac.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSCalendarioVaccinale"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSCalendarioVaccinale.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("en-US")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtCicSedVac = New dtCicSedVacDataTable
        MyBase.Tables.Add(Me.tabledtCicSedVac)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCicSedVac() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSCalendarioVaccinale = New DSCalendarioVaccinale
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtCicSedVacRowChangeEventHandler(ByVal sender As Object, ByVal e As dtCicSedVacRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCicSedVacDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtCicSedVacRow)
        
        Private columnCIC_CODICE As Global.System.Data.DataColumn
        
        Private columnCIC_DESCRIZIONE As Global.System.Data.DataColumn
        
        Private columnCIC_DATA_INTRODUZIONE As Global.System.Data.DataColumn
        
        Private columnVAC_DESCRIZIONE As Global.System.Data.DataColumn
        
        Private columnVAC_OBBLIGATORIA As Global.System.Data.DataColumn
        
        Private columnTSD_CIC_CODICE As Global.System.Data.DataColumn
        
        Private columnTSD_N_SEDUTA As Global.System.Data.DataColumn
        
        Private columnTSD_ETA_SEDUTA As Global.System.Data.DataColumn
        
        Private columnTSD_DURATA_SEDUTA As Global.System.Data.DataColumn
        
        Private columnTSD_INTERVALLO As Global.System.Data.DataColumn
        
        Private columnTSD_INTERVALLO_PROSSIMA As Global.System.Data.DataColumn
        
        Private columnSED_VAC_CODICE As Global.System.Data.DataColumn
        
        Private columnSED_N_RICHIAMO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCicSedVac"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIC_CODICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIC_CODICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIC_DESCRIZIONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIC_DESCRIZIONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIC_DATA_INTRODUZIONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIC_DATA_INTRODUZIONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VAC_DESCRIZIONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVAC_DESCRIZIONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VAC_OBBLIGATORIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVAC_OBBLIGATORIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TSD_CIC_CODICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSD_CIC_CODICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TSD_N_SEDUTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSD_N_SEDUTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TSD_ETA_SEDUTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSD_ETA_SEDUTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TSD_DURATA_SEDUTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSD_DURATA_SEDUTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TSD_INTERVALLOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSD_INTERVALLO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TSD_INTERVALLO_PROSSIMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSD_INTERVALLO_PROSSIMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SED_VAC_CODICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSED_VAC_CODICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SED_N_RICHIAMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSED_N_RICHIAMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCicSedVacRow
            Get
                Return CType(Me.Rows(index),dtCicSedVacRow)
            End Get
        End Property
        
        Public Event dtCicSedVacRowChanging As dtCicSedVacRowChangeEventHandler
        
        Public Event dtCicSedVacRowChanged As dtCicSedVacRowChangeEventHandler
        
        Public Event dtCicSedVacRowDeleting As dtCicSedVacRowChangeEventHandler
        
        Public Event dtCicSedVacRowDeleted As dtCicSedVacRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCicSedVacRow(ByVal row As dtCicSedVacRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCicSedVacRow(ByVal CIC_CODICE As String, ByVal CIC_DESCRIZIONE As String, ByVal CIC_DATA_INTRODUZIONE As Date, ByVal VAC_DESCRIZIONE As String, ByVal VAC_OBBLIGATORIA As String, ByVal TSD_CIC_CODICE As String, ByVal TSD_N_SEDUTA As Long, ByVal TSD_ETA_SEDUTA As Long, ByVal TSD_DURATA_SEDUTA As Long, ByVal TSD_INTERVALLO As Long, ByVal TSD_INTERVALLO_PROSSIMA As Long, ByVal SED_VAC_CODICE As String, ByVal SED_N_RICHIAMO As Long) As dtCicSedVacRow
            Dim rowdtCicSedVacRow As dtCicSedVacRow = CType(Me.NewRow,dtCicSedVacRow)
            Dim columnValuesArray() As Object = New Object() {CIC_CODICE, CIC_DESCRIZIONE, CIC_DATA_INTRODUZIONE, VAC_DESCRIZIONE, VAC_OBBLIGATORIA, TSD_CIC_CODICE, TSD_N_SEDUTA, TSD_ETA_SEDUTA, TSD_DURATA_SEDUTA, TSD_INTERVALLO, TSD_INTERVALLO_PROSSIMA, SED_VAC_CODICE, SED_N_RICHIAMO}
            rowdtCicSedVacRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCicSedVacRow)
            Return rowdtCicSedVacRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCicSedVacDataTable = CType(MyBase.Clone,dtCicSedVacDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCicSedVacDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCIC_CODICE = MyBase.Columns("CIC_CODICE")
            Me.columnCIC_DESCRIZIONE = MyBase.Columns("CIC_DESCRIZIONE")
            Me.columnCIC_DATA_INTRODUZIONE = MyBase.Columns("CIC_DATA_INTRODUZIONE")
            Me.columnVAC_DESCRIZIONE = MyBase.Columns("VAC_DESCRIZIONE")
            Me.columnVAC_OBBLIGATORIA = MyBase.Columns("VAC_OBBLIGATORIA")
            Me.columnTSD_CIC_CODICE = MyBase.Columns("TSD_CIC_CODICE")
            Me.columnTSD_N_SEDUTA = MyBase.Columns("TSD_N_SEDUTA")
            Me.columnTSD_ETA_SEDUTA = MyBase.Columns("TSD_ETA_SEDUTA")
            Me.columnTSD_DURATA_SEDUTA = MyBase.Columns("TSD_DURATA_SEDUTA")
            Me.columnTSD_INTERVALLO = MyBase.Columns("TSD_INTERVALLO")
            Me.columnTSD_INTERVALLO_PROSSIMA = MyBase.Columns("TSD_INTERVALLO_PROSSIMA")
            Me.columnSED_VAC_CODICE = MyBase.Columns("SED_VAC_CODICE")
            Me.columnSED_N_RICHIAMO = MyBase.Columns("SED_N_RICHIAMO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCIC_CODICE = New Global.System.Data.DataColumn("CIC_CODICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIC_CODICE)
            Me.columnCIC_DESCRIZIONE = New Global.System.Data.DataColumn("CIC_DESCRIZIONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIC_DESCRIZIONE)
            Me.columnCIC_DATA_INTRODUZIONE = New Global.System.Data.DataColumn("CIC_DATA_INTRODUZIONE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIC_DATA_INTRODUZIONE)
            Me.columnVAC_DESCRIZIONE = New Global.System.Data.DataColumn("VAC_DESCRIZIONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVAC_DESCRIZIONE)
            Me.columnVAC_OBBLIGATORIA = New Global.System.Data.DataColumn("VAC_OBBLIGATORIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVAC_OBBLIGATORIA)
            Me.columnTSD_CIC_CODICE = New Global.System.Data.DataColumn("TSD_CIC_CODICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSD_CIC_CODICE)
            Me.columnTSD_N_SEDUTA = New Global.System.Data.DataColumn("TSD_N_SEDUTA", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSD_N_SEDUTA)
            Me.columnTSD_ETA_SEDUTA = New Global.System.Data.DataColumn("TSD_ETA_SEDUTA", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSD_ETA_SEDUTA)
            Me.columnTSD_DURATA_SEDUTA = New Global.System.Data.DataColumn("TSD_DURATA_SEDUTA", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSD_DURATA_SEDUTA)
            Me.columnTSD_INTERVALLO = New Global.System.Data.DataColumn("TSD_INTERVALLO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSD_INTERVALLO)
            Me.columnTSD_INTERVALLO_PROSSIMA = New Global.System.Data.DataColumn("TSD_INTERVALLO_PROSSIMA", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSD_INTERVALLO_PROSSIMA)
            Me.columnSED_VAC_CODICE = New Global.System.Data.DataColumn("SED_VAC_CODICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSED_VAC_CODICE)
            Me.columnSED_N_RICHIAMO = New Global.System.Data.DataColumn("SED_N_RICHIAMO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSED_N_RICHIAMO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCicSedVacRow() As dtCicSedVacRow
            Return CType(Me.NewRow,dtCicSedVacRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCicSedVacRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCicSedVacRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCicSedVacRowChangedEvent) Is Nothing) Then
                RaiseEvent dtCicSedVacRowChanged(Me, New dtCicSedVacRowChangeEvent(CType(e.Row,dtCicSedVacRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCicSedVacRowChangingEvent) Is Nothing) Then
                RaiseEvent dtCicSedVacRowChanging(Me, New dtCicSedVacRowChangeEvent(CType(e.Row,dtCicSedVacRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCicSedVacRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCicSedVacRowDeleted(Me, New dtCicSedVacRowChangeEvent(CType(e.Row,dtCicSedVacRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCicSedVacRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCicSedVacRowDeleting(Me, New dtCicSedVacRowChangeEvent(CType(e.Row,dtCicSedVacRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCicSedVacRow(ByVal row As dtCicSedVacRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSCalendarioVaccinale = New DSCalendarioVaccinale
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCicSedVacDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCicSedVacRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtCicSedVac As dtCicSedVacDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCicSedVac = CType(Me.Table,dtCicSedVacDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIC_CODICE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.CIC_CODICEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIC_CODICE' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.CIC_CODICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIC_DESCRIZIONE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.CIC_DESCRIZIONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIC_DESCRIZIONE' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.CIC_DESCRIZIONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIC_DATA_INTRODUZIONE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.CIC_DATA_INTRODUZIONEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIC_DATA_INTRODUZIONE' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.CIC_DATA_INTRODUZIONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VAC_DESCRIZIONE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.VAC_DESCRIZIONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VAC_DESCRIZIONE' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.VAC_DESCRIZIONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VAC_OBBLIGATORIA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.VAC_OBBLIGATORIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VAC_OBBLIGATORIA' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.VAC_OBBLIGATORIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TSD_CIC_CODICE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.TSD_CIC_CODICEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TSD_CIC_CODICE' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.TSD_CIC_CODICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TSD_N_SEDUTA() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.TSD_N_SEDUTAColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TSD_N_SEDUTA' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.TSD_N_SEDUTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TSD_ETA_SEDUTA() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.TSD_ETA_SEDUTAColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TSD_ETA_SEDUTA' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.TSD_ETA_SEDUTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TSD_DURATA_SEDUTA() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.TSD_DURATA_SEDUTAColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TSD_DURATA_SEDUTA' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.TSD_DURATA_SEDUTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TSD_INTERVALLO() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.TSD_INTERVALLOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TSD_INTERVALLO' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.TSD_INTERVALLOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TSD_INTERVALLO_PROSSIMA() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.TSD_INTERVALLO_PROSSIMAColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TSD_INTERVALLO_PROSSIMA' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.TSD_INTERVALLO_PROSSIMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SED_VAC_CODICE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.SED_VAC_CODICEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SED_VAC_CODICE' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.SED_VAC_CODICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SED_N_RICHIAMO() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledtCicSedVac.SED_N_RICHIAMOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SED_N_RICHIAMO' in table 'dtCicSedVac' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCicSedVac.SED_N_RICHIAMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIC_CODICENull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.CIC_CODICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIC_CODICENull()
            Me(Me.tabledtCicSedVac.CIC_CODICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIC_DESCRIZIONENull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.CIC_DESCRIZIONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIC_DESCRIZIONENull()
            Me(Me.tabledtCicSedVac.CIC_DESCRIZIONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIC_DATA_INTRODUZIONENull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.CIC_DATA_INTRODUZIONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIC_DATA_INTRODUZIONENull()
            Me(Me.tabledtCicSedVac.CIC_DATA_INTRODUZIONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVAC_DESCRIZIONENull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.VAC_DESCRIZIONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVAC_DESCRIZIONENull()
            Me(Me.tabledtCicSedVac.VAC_DESCRIZIONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVAC_OBBLIGATORIANull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.VAC_OBBLIGATORIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVAC_OBBLIGATORIANull()
            Me(Me.tabledtCicSedVac.VAC_OBBLIGATORIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTSD_CIC_CODICENull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.TSD_CIC_CODICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTSD_CIC_CODICENull()
            Me(Me.tabledtCicSedVac.TSD_CIC_CODICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTSD_N_SEDUTANull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.TSD_N_SEDUTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTSD_N_SEDUTANull()
            Me(Me.tabledtCicSedVac.TSD_N_SEDUTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTSD_ETA_SEDUTANull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.TSD_ETA_SEDUTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTSD_ETA_SEDUTANull()
            Me(Me.tabledtCicSedVac.TSD_ETA_SEDUTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTSD_DURATA_SEDUTANull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.TSD_DURATA_SEDUTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTSD_DURATA_SEDUTANull()
            Me(Me.tabledtCicSedVac.TSD_DURATA_SEDUTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTSD_INTERVALLONull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.TSD_INTERVALLOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTSD_INTERVALLONull()
            Me(Me.tabledtCicSedVac.TSD_INTERVALLOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTSD_INTERVALLO_PROSSIMANull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.TSD_INTERVALLO_PROSSIMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTSD_INTERVALLO_PROSSIMANull()
            Me(Me.tabledtCicSedVac.TSD_INTERVALLO_PROSSIMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSED_VAC_CODICENull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.SED_VAC_CODICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSED_VAC_CODICENull()
            Me(Me.tabledtCicSedVac.SED_VAC_CODICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSED_N_RICHIAMONull() As Boolean
            Return Me.IsNull(Me.tabledtCicSedVac.SED_N_RICHIAMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSED_N_RICHIAMONull()
            Me(Me.tabledtCicSedVac.SED_N_RICHIAMOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCicSedVacRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCicSedVacRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCicSedVacRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCicSedVacRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
