'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
'
Namespace wsSGP
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WsSgpSoap", [Namespace]:="http://SWUslCesena/")>  _
    Partial Public Class WsSgp
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CalcoloTicketOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PianiDiLavoroOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MappaturaRichiesteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvioErogatoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RicercaXCodiceRichiestaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProvaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Onit.OnAssistnet.OnVac.My.MySettings.Default.Onit_OnAssistnet_OnVac_Web_wsSGP_WsSgp
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CalcoloTicketCompleted As CalcoloTicketCompletedEventHandler
        
        '''<remarks/>
        Public Event PianiDiLavoroCompleted As PianiDiLavoroCompletedEventHandler
        
        '''<remarks/>
        Public Event MappaturaRichiesteCompleted As MappaturaRichiesteCompletedEventHandler
        
        '''<remarks/>
        Public Event InvioErogatoCompleted As InvioErogatoCompletedEventHandler
        
        '''<remarks/>
        Public Event RicercaXCodiceRichiestaCompleted As RicercaXCodiceRichiestaCompletedEventHandler
        
        '''<remarks/>
        Public Event ProvaCompleted As ProvaCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SWUslCesena/CalcoloTicket", RequestNamespace:="http://SWUslCesena/", ResponseNamespace:="http://SWUslCesena/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalcoloTicket(ByVal XmlIn As String) As String
            Dim results() As Object = Me.Invoke("CalcoloTicket", New Object() {XmlIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCalcoloTicket(ByVal XmlIn As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CalcoloTicket", New Object() {XmlIn}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCalcoloTicket(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalcoloTicketAsync(ByVal XmlIn As String)
            Me.CalcoloTicketAsync(XmlIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalcoloTicketAsync(ByVal XmlIn As String, ByVal userState As Object)
            If (Me.CalcoloTicketOperationCompleted Is Nothing) Then
                Me.CalcoloTicketOperationCompleted = AddressOf Me.OnCalcoloTicketOperationCompleted
            End If
            Me.InvokeAsync("CalcoloTicket", New Object() {XmlIn}, Me.CalcoloTicketOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalcoloTicketOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalcoloTicketCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalcoloTicketCompleted(Me, New CalcoloTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SWUslCesena/PianiDiLavoro", RequestNamespace:="http://SWUslCesena/", ResponseNamespace:="http://SWUslCesena/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PianiDiLavoro(ByVal XmlIn As String) As String
            Dim results() As Object = Me.Invoke("PianiDiLavoro", New Object() {XmlIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPianiDiLavoro(ByVal XmlIn As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PianiDiLavoro", New Object() {XmlIn}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPianiDiLavoro(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PianiDiLavoroAsync(ByVal XmlIn As String)
            Me.PianiDiLavoroAsync(XmlIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PianiDiLavoroAsync(ByVal XmlIn As String, ByVal userState As Object)
            If (Me.PianiDiLavoroOperationCompleted Is Nothing) Then
                Me.PianiDiLavoroOperationCompleted = AddressOf Me.OnPianiDiLavoroOperationCompleted
            End If
            Me.InvokeAsync("PianiDiLavoro", New Object() {XmlIn}, Me.PianiDiLavoroOperationCompleted, userState)
        End Sub
        
        Private Sub OnPianiDiLavoroOperationCompleted(ByVal arg As Object)
            If (Not (Me.PianiDiLavoroCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PianiDiLavoroCompleted(Me, New PianiDiLavoroCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SWUslCesena/MappaturaRichieste", RequestNamespace:="http://SWUslCesena/", ResponseNamespace:="http://SWUslCesena/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MappaturaRichieste(ByVal XmlIn As String) As String
            Dim results() As Object = Me.Invoke("MappaturaRichieste", New Object() {XmlIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginMappaturaRichieste(ByVal XmlIn As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MappaturaRichieste", New Object() {XmlIn}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMappaturaRichieste(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MappaturaRichiesteAsync(ByVal XmlIn As String)
            Me.MappaturaRichiesteAsync(XmlIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MappaturaRichiesteAsync(ByVal XmlIn As String, ByVal userState As Object)
            If (Me.MappaturaRichiesteOperationCompleted Is Nothing) Then
                Me.MappaturaRichiesteOperationCompleted = AddressOf Me.OnMappaturaRichiesteOperationCompleted
            End If
            Me.InvokeAsync("MappaturaRichieste", New Object() {XmlIn}, Me.MappaturaRichiesteOperationCompleted, userState)
        End Sub
        
        Private Sub OnMappaturaRichiesteOperationCompleted(ByVal arg As Object)
            If (Not (Me.MappaturaRichiesteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MappaturaRichiesteCompleted(Me, New MappaturaRichiesteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SWUslCesena/InvioErogato", RequestNamespace:="http://SWUslCesena/", ResponseNamespace:="http://SWUslCesena/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvioErogato(ByVal XmlIn As String) As String
            Dim results() As Object = Me.Invoke("InvioErogato", New Object() {XmlIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginInvioErogato(ByVal XmlIn As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("InvioErogato", New Object() {XmlIn}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndInvioErogato(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvioErogatoAsync(ByVal XmlIn As String)
            Me.InvioErogatoAsync(XmlIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvioErogatoAsync(ByVal XmlIn As String, ByVal userState As Object)
            If (Me.InvioErogatoOperationCompleted Is Nothing) Then
                Me.InvioErogatoOperationCompleted = AddressOf Me.OnInvioErogatoOperationCompleted
            End If
            Me.InvokeAsync("InvioErogato", New Object() {XmlIn}, Me.InvioErogatoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvioErogatoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvioErogatoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvioErogatoCompleted(Me, New InvioErogatoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SWUslCesena/RicercaXCodiceRichiesta", RequestNamespace:="http://SWUslCesena/", ResponseNamespace:="http://SWUslCesena/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RicercaXCodiceRichiesta(ByVal chiaveImportata As String, ByRef ds As System.Data.DataSet, ByRef strerrmsg As String) As Boolean
            Dim results() As Object = Me.Invoke("RicercaXCodiceRichiesta", New Object() {chiaveImportata, ds, strerrmsg})
            ds = CType(results(1),System.Data.DataSet)
            strerrmsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRicercaXCodiceRichiesta(ByVal chiaveImportata As String, ByVal ds As System.Data.DataSet, ByVal strerrmsg As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RicercaXCodiceRichiesta", New Object() {chiaveImportata, ds, strerrmsg}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRicercaXCodiceRichiesta(ByVal asyncResult As System.IAsyncResult, ByRef ds As System.Data.DataSet, ByRef strerrmsg As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ds = CType(results(1),System.Data.DataSet)
            strerrmsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RicercaXCodiceRichiestaAsync(ByVal chiaveImportata As String, ByVal ds As System.Data.DataSet, ByVal strerrmsg As String)
            Me.RicercaXCodiceRichiestaAsync(chiaveImportata, ds, strerrmsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RicercaXCodiceRichiestaAsync(ByVal chiaveImportata As String, ByVal ds As System.Data.DataSet, ByVal strerrmsg As String, ByVal userState As Object)
            If (Me.RicercaXCodiceRichiestaOperationCompleted Is Nothing) Then
                Me.RicercaXCodiceRichiestaOperationCompleted = AddressOf Me.OnRicercaXCodiceRichiestaOperationCompleted
            End If
            Me.InvokeAsync("RicercaXCodiceRichiesta", New Object() {chiaveImportata, ds, strerrmsg}, Me.RicercaXCodiceRichiestaOperationCompleted, userState)
        End Sub
        
        Private Sub OnRicercaXCodiceRichiestaOperationCompleted(ByVal arg As Object)
            If (Not (Me.RicercaXCodiceRichiestaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RicercaXCodiceRichiestaCompleted(Me, New RicercaXCodiceRichiestaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SWUslCesena/Prova", RequestNamespace:="http://SWUslCesena/", ResponseNamespace:="http://SWUslCesena/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Prova(ByVal chiaveImportata As String) As String
            Dim results() As Object = Me.Invoke("Prova", New Object() {chiaveImportata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginProva(ByVal chiaveImportata As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Prova", New Object() {chiaveImportata}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndProva(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProvaAsync(ByVal chiaveImportata As String)
            Me.ProvaAsync(chiaveImportata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProvaAsync(ByVal chiaveImportata As String, ByVal userState As Object)
            If (Me.ProvaOperationCompleted Is Nothing) Then
                Me.ProvaOperationCompleted = AddressOf Me.OnProvaOperationCompleted
            End If
            Me.InvokeAsync("Prova", New Object() {chiaveImportata}, Me.ProvaOperationCompleted, userState)
        End Sub
        
        Private Sub OnProvaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProvaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProvaCompleted(Me, New ProvaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CalcoloTicketCompletedEventHandler(ByVal sender As Object, ByVal e As CalcoloTicketCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalcoloTicketCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub PianiDiLavoroCompletedEventHandler(ByVal sender As Object, ByVal e As PianiDiLavoroCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PianiDiLavoroCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub MappaturaRichiesteCompletedEventHandler(ByVal sender As Object, ByVal e As MappaturaRichiesteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MappaturaRichiesteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub InvioErogatoCompletedEventHandler(ByVal sender As Object, ByVal e As InvioErogatoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvioErogatoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RicercaXCodiceRichiestaCompletedEventHandler(ByVal sender As Object, ByVal e As RicercaXCodiceRichiestaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RicercaXCodiceRichiestaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strerrmsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ProvaCompletedEventHandler(ByVal sender As Object, ByVal e As ProvaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProvaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
